/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.hanoi;
import java.awt.Color;

import javax.swing.JPanel;
import javax.swing.JFrame;


/**
 *
 * @author julie
 */
public class HanoiGraphics extends JFrame {

    /**
     * Creates new form HanoiGraphics
     */
    private Pila [] tours;    
    private int moves;
    
    public HanoiGraphics() {
        initComponents();
        
        // Initialiser les tours
        tours = new Pila[3]; 
        for (int i = 0; i < tours.length; i++) {
            tours[i] = new Pila();
        }  
        moves = 0;
        initDiscos(); // Initialiser les disques
        moveCounterLabel.setText("No de movimientos :  " + moves);
        printArea.setEditable(false);
        refresh();

    }
    
    private JPanel getPanelForTower(int towerIndex) {
        return switch (towerIndex) {
            case 0 -> pTowerA;
            case 1 -> pTowerB;
            case 2 -> pTowerC;
            default -> null;
        };
    }
    
    private void addDiscoToTower(Disco disco, JPanel panel) {
        int yPosition = panel.getHeight() - (panel.getComponentCount() * 25) - 25; // Position Y
        disco.setLocation((panel.getWidth() - disco.getWidth()) / 2, yPosition); // Centrer le disque
        panel.add(disco);

        panel.revalidate();
        panel.repaint();
    }
    
    private void initDiscos() {
        int[] sizes = {5, 4, 3, 2, 1}; 
        Color[] colors = {Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.CYAN}; 
 

        for (int i = 0; i < sizes.length; i++) {
            Disco disco = new Disco(sizes[i], colors[i]); 
            tours[0].push(disco);  
        }
        
        refresh();
    }

    
    private void refresh(){
        // Effacer tous les composants de chaque panneau
        pTowerA.removeAll();
        pTowerB.removeAll();
        pTowerC.removeAll();
        
        for (int i = 0; i < tours.length; i++) {
            Pila currentTower = tours[i];
            int numDiscos = currentTower.tamanio();

            // Ajoutez les disques de haut en bas (du plus petit au plus grand)
            for (int j = numDiscos - 1; j >= 0; j--) {
                Disco disco = (Disco) currentTower.getAt(j);
                addDiscoToTower(disco, getPanelForTower(i)); // Redessiner chaque disque
            }
        }
     
        pTowerA.revalidate();
        pTowerB.revalidate();
        pTowerC.revalidate();
        pTowerA.repaint();
        pTowerB.repaint();
        pTowerC.repaint();
        
    }


    private void appendMessage(String message) {
        // Ajouter un message au JTextPane
        //String currentText = printArea.getText();
        printArea.setText(message + "\n"); // Ajoutez le message Ã  la fin
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pTower1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTorreC = new javax.swing.JLabel();
        pTowerA = new javax.swing.JPanel();
        jLabelTorreA = new javax.swing.JLabel();
        txtDiscos = new javax.swing.JTextField();
        pTowerB = new javax.swing.JPanel();
        pTowerC = new javax.swing.JPanel();
        jLabelDisco = new javax.swing.JLabel();
        jLabelTorreB = new javax.swing.JLabel();
        jLabelTorre = new javax.swing.JLabel();
        txtTorre = new javax.swing.JTextField();
        btnMove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        printArea = new javax.swing.JTextPane();
        moveCounterLabel = new javax.swing.JLabel();

        pTower1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pTower1Layout = new javax.swing.GroupLayout(pTower1);
        pTower1.setLayout(pTower1Layout);
        pTower1Layout.setHorizontalGroup(
            pTower1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );
        pTower1Layout.setVerticalGroup(
            pTower1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Torre 1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelTorreC.setText("Torre C");

        pTowerA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pTowerALayout = new javax.swing.GroupLayout(pTowerA);
        pTowerA.setLayout(pTowerALayout);
        pTowerALayout.setHorizontalGroup(
            pTowerALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        pTowerALayout.setVerticalGroup(
            pTowerALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabelTorreA.setText("Torre A");

        pTowerB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pTowerBLayout = new javax.swing.GroupLayout(pTowerB);
        pTowerB.setLayout(pTowerBLayout);
        pTowerBLayout.setHorizontalGroup(
            pTowerBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        pTowerBLayout.setVerticalGroup(
            pTowerBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pTowerC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pTowerCLayout = new javax.swing.GroupLayout(pTowerC);
        pTowerC.setLayout(pTowerCLayout);
        pTowerCLayout.setHorizontalGroup(
            pTowerCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        pTowerCLayout.setVerticalGroup(
            pTowerCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
        );

        jLabelDisco.setText("Disco");

        jLabelTorreB.setText("Torre B");

        jLabelTorre.setText("Torre");

        btnMove.setText("Move");
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(printArea);

        moveCounterLabel.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pTowerA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pTowerB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pTowerC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabelTorreA)
                        .addGap(108, 108, 108)
                        .addComponent(jLabelTorreB)
                        .addGap(111, 111, 111)
                        .addComponent(jLabelTorreC)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveCounterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelDisco)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnMove))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelTorre)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtTorre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTorreA, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelTorreC)
                                .addComponent(jLabelTorreB)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pTowerB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pTowerA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pTowerC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(moveCounterLabel)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelDisco)
                                    .addComponent(txtDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelTorre)
                                    .addComponent(txtTorre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(btnMove)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        
        String diskInput = txtDiscos.getText();
        if (diskInput.isEmpty()) {
            appendMessage("Por favor, ingrese un nÃºmero de disco.\n"); 
            return;
        }
        int diskToMove = Integer.parseInt(diskInput);
        if (diskToMove < 1 || diskToMove > 5) {
            appendMessage("El disco debe ser entre 1 y 5.\n");
            return;
        }
        
        String towerInput = txtTorre.getText().toUpperCase(); 
        //System.out.println("Le disque " + diskToMove + " vers la tour " + toTowerIndex);
        if (towerInput.isEmpty()) {
            appendMessage("Por favor, ingrese una torre (A, B o C).\n"); // Message d'erreur pour la tour
            return;
        }
        int toTowerIndex;
        switch (towerInput) {
            case "A" -> toTowerIndex = 0;
            case "B" -> toTowerIndex = 1;
            case "C" -> toTowerIndex = 2;
            default -> {
                appendMessage("Entrada de torre no vÃ¡lida. Debe ser A, B o C.\n");
                return; // Sortir si l'entrÃ©e est invalide
            }
        }
        int fromTowerIndex = findDiskSource(diskToMove); // Trouver l'indice de la tour source

        // VÃ©rifier si le disque a Ã©tÃ© trouvÃ©
        if (fromTowerIndex == -1) {
            appendMessage("El elemento que quiere retirar no se encuentre el el TOPE");
            return;
        }
        if (fromTowerIndex == toTowerIndex) {
            appendMessage("El disco ya estÃ¡ en esta torre.");
            return; // Sortir si on essaie de dÃ©placer le disque sur la mÃªme tour
        }
        if (isMoveValid(toTowerIndex, diskToMove)) {
            // DÃ©placer le disque
            Disco movingDisk = (Disco) tours[fromTowerIndex].pop(); // Enlever le disque de la source
            tours[toTowerIndex].push(movingDisk); // Ajouter le disque Ã  la destination
            moves++;
            moveCounterLabel.setText("No de movimientos :  " + moves);
            appendMessage("Desplazamiento del disco");
            refresh(); // RafraÃ®chir l'affichage pour reflÃ©ter le changement
            if (win()==true){
                appendMessage("Â¡Felicidades! Has ganado el juego.\n");
            }
        } else {
            appendMessage("No se puede mover el disco " + diskToMove + " a uno mÃ¡s pequeÃ±o.");
        } 
     
    }//GEN-LAST:event_btnMoveActionPerformed
    private int findDiskSource(int diskToMove) {
        for (int i = 0; i < tours.length; i++) {
            if (!tours[i].estaVacia() && ((Disco) tours[i].top()).getnSize() == diskToMove) {
                return i; // Retourne l'indice de la tour contenant le disque
            }
        }
        return -1; // Retourne -1 si le disque n'est pas trouvÃ©
    }
    
    private boolean isMoveValid(int toTowerIndex, int diskToMove) {
            if (tours[toTowerIndex].estaVacia()) {
                return true;
            }

            Disco topDisk = (Disco) tours[toTowerIndex].top();
            return topDisk.getnSize() > diskToMove; 
    }
    
    
    private boolean win(){
        return tours[2].tamanio() == 5;
    }
    
    
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HanoiGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HanoiGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HanoiGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HanoiGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HanoiGraphics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDisco;
    private javax.swing.JLabel jLabelTorre;
    private javax.swing.JLabel jLabelTorreA;
    private javax.swing.JLabel jLabelTorreB;
    private javax.swing.JLabel jLabelTorreC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel moveCounterLabel;
    private javax.swing.JPanel pTower1;
    private javax.swing.JPanel pTowerA;
    private javax.swing.JPanel pTowerB;
    private javax.swing.JPanel pTowerC;
    private javax.swing.JTextPane printArea;
    private javax.swing.JTextField txtDiscos;
    private javax.swing.JTextField txtTorre;
    // End of variables declaration//GEN-END:variables
}
